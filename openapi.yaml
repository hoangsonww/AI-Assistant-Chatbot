openapi: "3.0.0"
info:
  title: "AI Assistant API"
  version: "1.1.0"
  description: "API documentation for the AI Assistant application."
servers:
  - url: "https://ai-assistant-chatbot-server.vercel.app"
    description: "Production server"
  - url: "http://localhost:3000"
    description: "Local server"
tags:
  - name: "Auth"
    description: "Endpoints for user authentication and account management"
  - name: "Chat"
    description: "Endpoints for chat interactions with the AI assistant"
  - name: "Conversations"
    description: "Endpoints for managing user conversations"
paths:
  /api/auth/signup:
    post:
      tags:
        - "Auth"
      summary: "Sign Up a new user"
      description: "Create a new user account with the provided email and password."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
            example:
              email: "user@example.com"
              password: "yourpassword"
      responses:
        '200':
          description: "User created successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "User created successfully"
        '400':
          description: "User already exists."
        '500':
          description: "Server error."

  /api/auth/login:
    post:
      tags:
        - "Auth"
      summary: "Log in a user"
      description: "Authenticate a user with email and password and return a JWT token."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
            example:
              email: "user@example.com"
              password: "yourpassword"
      responses:
        '200':
          description: "Successfully authenticated."
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
              example:
                token: "your.jwt.token"
        '400':
          description: "Invalid credentials or user does not exist."
        '500':
          description: "Server error."

  /api/auth/verify-email:
    get:
      tags:
        - "Auth"
      summary: "Verify if an email exists"
      description: "Checks whether a user with the specified email exists."
      parameters:
        - name: email
          in: query
          description: "Email address to verify."
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: "Email verification result."
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
              example:
                exists: true
        '400':
          description: "Email is required."
        '500':
          description: "Server error."

  /api/auth/reset-password:
    post:
      tags:
        - "Auth"
      summary: "Reset user password"
      description: "Resets the password for a user identified by the email."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                newPassword:
                  type: string
              required:
                - email
                - newPassword
            example:
              email: "user@example.com"
              newPassword: "newpassword123"
      responses:
        '200':
          description: "Password reset successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Password reset successfully"
        '400':
          description: "Email and new password are required, or user does not exist."
        '500':
          description: "Server error."

  /api/chat/auth:
    post:
      tags:
        - "Chat"
      summary: "Chat with the AI assistant as an authenticated user"
      description: "Sends a chat message to the AI assistant. Requires a valid JWT in the Authorization header. The conversation is stored in MongoDB's Conversation collection."
      parameters:
        - name: Authorization
          in: header
          description: "JWT token in the format 'Bearer {token}'"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                conversationId:
                  type: string
              required:
                - message
            example:
              message: "Hello, AI!"
              conversationId: "60d5ec49f5a3c80015c0d9a4"
      responses:
        '200':
          description: "AI response for authenticated user."
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer:
                    type: string
                  conversationId:
                    type: string
              example:
                answer: "Hi there! How can I help you today?"
                conversationId: "60d5ec49f5a3c80015c0d9a4"
        '400':
          description: "Bad Request"
        '401':
          description: "Unauthorized (invalid or missing token)"
        '404':
          description: "Conversation not found"
        '500':
          description: "Server error."

  /api/chat/guest:
    post:
      tags:
        - "Chat"
      summary: "Chat with the AI assistant as a guest (unauthenticated)"
      description: "Sends a chat message to the AI assistant. No token required. The conversation is stored in MongoDB's GuestConversation collection, keyed by a guestId."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                guestId:
                  type: string
              required:
                - message
                - guestId
            example:
              message: "Hello from a guest user"
              guestId: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: "AI response for guest user."
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer:
                    type: string
                  guestId:
                    type: string
              example:
                answer: "Hi there! How can I help you today?"
                guestId: "123e4567-e89b-12d3-a456-426614174000"
        '400':
          description: "Bad Request"
        '500':
          description: "Server error."

  /api/conversations:
    post:
      tags:
        - "Conversations"
      summary: "Create a new conversation"
      description: "Creates a new conversation for the authenticated user with a default title of 'New Conversation'."
      responses:
        '200':
          description: "A conversation object."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
              example:
                id: "60d5ec49f5a3c80015c0d9a4"
                title: "New Conversation"
                messages: []
                createdAt: "2025-02-07T12:34:56Z"
                updatedAt: "2025-02-07T12:34:56Z"
        '500':
          description: "Internal server error."
    get:
      tags:
        - "Conversations"
      summary: "Get all conversations for the authenticated user"
      responses:
        '200':
          description: "A list of conversations."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Conversation'
              example:
                - id: "60d5ec49f5a3c80015c0d9a4"
                  title: "New Conversation"
                  messages: []
                  createdAt: "2025-02-07T12:34:56Z"
                  updatedAt: "2025-02-07T12:34:56Z"
        '500':
          description: "Internal server error."

  /api/conversations/{id}:
    get:
      tags:
        - "Conversations"
      summary: "Get a conversation by ID"
      parameters:
        - name: id
          in: path
          required: true
          description: "The conversation ID."
          schema:
            type: string
      responses:
        '200':
          description: "A conversation object."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
              example:
                id: "60d5ec49f5a3c80015c0d9a4"
                title: "New Conversation"
                messages: []
                createdAt: "2025-02-07T12:34:56Z"
                updatedAt: "2025-02-07T12:34:56Z"
        '404':
          description: "Conversation not found."
        '500':
          description: "Internal server error."
    put:
      tags:
        - "Conversations"
      summary: "Rename (update) a conversation's title"
      parameters:
        - name: id
          in: path
          required: true
          description: "The conversation ID."
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
              required:
                - title
            example:
              title: "Updated Conversation Title"
      responses:
        '200':
          description: "The updated conversation object."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
              example:
                id: "60d5ec49f5a3c80015c0d9a4"
                title: "Updated Conversation Title"
                messages: []
                createdAt: "2025-02-07T12:34:56Z"
                updatedAt: "2025-02-07T12:35:56Z"
        '404':
          description: "Conversation not found."
        '500':
          description: "Internal server error."
    delete:
      tags:
        - "Conversations"
      summary: "Delete a conversation"
      parameters:
        - name: id
          in: path
          required: true
          description: "The conversation ID to delete."
          schema:
            type: string
      responses:
        '200':
          description: "Conversation deleted successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Conversation deleted successfully"
        '404':
          description: "Conversation not found."
        '500':
          description: "Internal server error."

  /api/conversations/search/{query}:
    get:
      tags:
        - "Conversations"
      summary: "Search conversations by title or message content"
      parameters:
        - name: query
          in: path
          required: true
          description: "The search query."
          schema:
            type: string
      responses:
        '200':
          description: "A list of conversations matching the search criteria."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Conversation'
              example:
                - id: "60d5ec49f5a3c80015c0d9a4"
                  title: "Search Result Conversation"
                  messages: []
                  createdAt: "2025-02-07T12:34:56Z"
                  updatedAt: "2025-02-07T12:34:56Z"
        '500':
          description: "Internal server error."

components:
  schemas:
    Conversation:
      type: object
      properties:
        id:
          type: string
          description: "Unique identifier of the conversation."
        title:
          type: string
          description: "Title of the conversation."
        messages:
          type: array
          description: "List of messages in the conversation."
          items:
            $ref: '#/components/schemas/Message'
        createdAt:
          type: string
          format: date-time
          description: "Creation timestamp."
        updatedAt:
          type: string
          format: date-time
          description: "Last update timestamp."
      required:
        - id
        - title
    Message:
      type: object
      properties:
        sender:
          type: string
          description: "Sender of the message, e.g. 'user' or 'assistant'."
        content:
          type: string
          description: "The message content."
        timestamp:
          type: string
          format: date-time
          description: "The time the message was sent."
      required:
        - sender
        - content
        - timestamp
